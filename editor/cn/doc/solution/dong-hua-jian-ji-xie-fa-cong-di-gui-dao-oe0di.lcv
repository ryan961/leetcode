## 方法一：递归

<![lc2-1.png](https://pic.leetcode.cn/1688220185-RQeZVa-lc2-1.png),![lc2-2.png](https://pic.leetcode.cn/1688220185-MxyXvT-lc2-2.png),![lc2-3.png](https://pic.leetcode.cn/1688220185-cbYoMw-lc2-3.png),![lc2-4.png](https://pic.leetcode.cn/1688220185-VoWMSh-lc2-4.png),![lc2-5.png](https://pic.leetcode.cn/1688220185-UwxODb-lc2-5.png),![lc2-6.png](https://pic.leetcode.cn/1688220185-tNovMh-lc2-6.png),![lc2-7.png](https://pic.leetcode.cn/1688220185-NbApIF-lc2-7.png),![lc2-8.png](https://pic.leetcode.cn/1688220335-FmbsUK-lc2-8.png)>

把虚线内要计算的内容，可以理解为一个和原问题相似的，规模更小的子问题，所以非常适合用**递归**解决。

每次把两个节点值 $l_1.\textit{val},\ l_2.\textit{val}$ 与进位值 $\textit{carry}$ 相加，除以 $10$ 的余数即为当前节点需要保存的数位，除以 $10$ 的商即为新的进位值。

一遇到递归就头晕？请看[【基础算法精讲 09】](https://www.bilibili.com/video/BV1UD4y1Y769/)。

不了解链表的同学请看[【基础算法精讲 06】](https://www.bilibili.com/video/BV1sd4y1x7KN/)。

代码实现时，有一个简化代码的小技巧：如果递归中发现 $l_2$ 的长度比 $l_1$ 更长，那么可以交换 $l_1$ 和 $l_2$，保证 $l_1$ 不是空节点，从而简化代码逻辑。

* [sol-Python3]

```py
class Solution:
    # l1 和 l2 为当前遍历的节点，carry 为进位
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode], carry=0) -> Optional[ListNode]:
        if l1 is None and l2 is None:  # 递归边界：l1 和 l2 都是空节点
            return ListNode(carry) if carry else None  # 如果进位了，就额外创建一个节点
        if l1 is None:  # 如果 l1 是空的，那么此时 l2 一定不是空节点
            l1, l2 = l2, l1  # 交换 l1 与 l2，保证 l1 非空，从而简化代码
        carry += l1.val + (l2.val if l2 else 0)  # 节点值和进位加在一起
        l1.val = carry % 10  # 每个节点保存一个数位
        l1.next = self.addTwoNumbers(l1.next, l2.next if l2 else None, carry // 10)  # 进位
        return l1
```

* [sol-Java]

```java
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        return addTwo(l1, l2, 0);
    }

    // l1 和 l2 为当前遍历的节点，carry 为进位
    private ListNode addTwo(ListNode l1, ListNode l2, int carry) {
        if (l1 == null && l2 == null) // 递归边界：l1 和 l2 都是空节点
            return carry != 0 ? new ListNode(carry) : null; // 如果进位了，就额外创建一个节点
        if (l1 == null) { // 如果 l1 是空的，那么此时 l2 一定不是空节点
            l1 = l2;
            l2 = null; // 交换 l1 与 l2，保证 l1 非空，从而简化代码
        }
        carry += l1.val + (l2 != null ? l2.val : 0); // 节点值和进位加在一起
        l1.val = carry % 10; // 每个节点保存一个数位
        l1.next = addTwo(l1.next, (l2 != null ? l2.next : null), carry / 10); // 进位
        return l1;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    // l1 和 l2 为当前遍历的节点，carry 为进位
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2, int carry = 0) {
        if (l1 == nullptr && l2 == nullptr) // 递归边界：l1 和 l2 都是空节点
            return carry ? new ListNode(carry) : nullptr; // 如果进位了，就额外创建一个节点
        if (l1 == nullptr) // 如果 l1 是空的，那么此时 l2 一定不是空节点
            swap(l1, l2); // 交换 l1 与 l2，保证 l1 非空，从而简化代码
        carry += l1->val + (l2 ? l2->val : 0); // 节点值和进位加在一起
        l1->val = carry % 10; // 每个节点保存一个数位
        l1->next = addTwoNumbers(l1->next, (l2 ? l2->next : nullptr), carry / 10); // 进位
        return l1;
    }
};
```

* [sol-Go]

```go
// l1 和 l2 为当前遍历的节点，carry 为进位
func addTwo(l1, l2 *ListNode, carry int) *ListNode {
    if l1 == nil && l2 == nil { // 递归边界：l1 和 l2 都是空节点
        if carry != 0 {
            return &ListNode{Val: carry} // 如果进位了，就额外创建一个节点
        }
        return nil
    }
    if l1 == nil { // 如果 l1 是空的，那么此时 l2 一定不是空节点
        l1, l2 = l2, l1 // 交换 l1 与 l2，保证 l1 非空，从而简化代码
    }
    carry += l1.Val // 节点值和进位加在一起
    if l2 != nil {
        carry += l2.Val // 节点值和进位加在一起
        l2 = l2.Next // 下一个节点
    }
    l1.Val = carry % 10 // 每个节点保存一个数位
    l1.Next = addTwo(l1.Next, l2, carry/10) // 进位
    return l1
}

func addTwoNumbers(l1, l2 *ListNode) *ListNode {
    return addTwo(l1, l2, 0)
}
```

* [sol-JavaScript]

```js
// l1 和 l2 为当前遍历的节点，carry 为进位
var addTwoNumbers = function (l1, l2, carry = 0) {
    if (l1 === null && l2 === null) // 递归边界：l1 和 l2 都是空节点
        return carry ? new ListNode(carry) : null; // 如果进位了，就额外创建一个节点
    if (l1 === null) // 如果 l1 是空的，那么此时 l2 一定不是空节点
        [l1, l2] = [l2, l1]; // 交换 l1 与 l2，保证 l1 非空，从而简化代码
    carry += l1.val + (l2 ? l2.val : 0); // 节点值和进位加在一起
    l1.val = carry % 10; // 每个节点保存一个数位
    l1.next = addTwoNumbers(l1.next, (l2 ? l2.next : null), Math.floor(carry / 10)); // 进位
    return l1;
};
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $l_1$ 长度和 $l_2$ 长度的最大值。
- 空间复杂度：$\mathcal{O}(n)$。递归需要 $\mathcal{O}(n)$ 的栈空间。

## 方法二：迭代

首先请看如何遍历一个链表，代码框架如下：

* [sol-Python3]

```py
# 遍历链表 l1
while l1:  # 从链表头节点开始向后遍历，直到遇到空节点
    print(l1.val)  # 当前节点值
    l1 = l1.next  # 准备遍历下一个节点
```

* [sol-Java]

```java
// 遍历链表 l1
while (l1 != null) { // 从链表头节点开始向后遍历，直到遇到空节点
    System.out.println(l1.val); // 当前节点值
    l1 = l1.next; // 准备遍历下一个节点
}
```

* [sol-C++]

```cpp
// 遍历链表 l1
while (l1) { // 从链表头节点开始向后遍历，直到遇到空节点
    cout << l1->val << endl; // 当前节点值
    l1 = l1->next; // 准备遍历下一个节点
}
```

* [sol-Go]

```go
// 遍历链表 l1
for l1 != nil { // 从链表头节点开始向后遍历，直到遇到空节点
    fmt.Println(l1.Val) // 当前节点值
    l1 = l1.Next // 准备遍历下一个节点
}
```

* [sol-JavaScript]

```js
// 遍历链表 l1
while (l1) { // 从链表头节点开始向后遍历，直到遇到空节点
    console.log(l1.val); // 当前节点值
    l1 = l1.next; // 准备遍历下一个节点
}
```

迭代的思路是，初始化答案为一个「空链表」，每次循环，向该链表末尾添加一个节点（保存一个数位）。

循环即遍历链表 $l_1$ 和 $l_2$，每次把两个节点值 $l_1.\textit{val},\ l_2.\textit{val}$ 与进位值 $\textit{carry}$ 相加，除以 $10$ 的余数即为当前节点需要保存的数位，除以 $10$ 的商即为新的进位值。

需要注意的是，在第一次循环时，我们无法往一个空节点的末尾添加节点。这里的技巧是，创建一个**哨兵节点**（dummy node），当成初始的「空链表」。循环结束后，哨兵节点的下一个节点就是最终要返回的链表头节点。

* [sol-Python3]

```py
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        cur = dummy = ListNode()  # 哨兵节点
        carry = 0  # 进位
        while l1 or l2 or carry:  # 有一个不是空节点，或者还有进位，就继续迭代
            carry += (l1.val if l1 else 0) + (l2.val if l2 else 0)  # 节点值和进位加在一起
            cur.next = ListNode(carry % 10)  # 每个节点保存一个数位
            carry //= 10  # 新的进位
            cur = cur.next  # 下一个节点
            if l1: l1 = l1.next  # 下一个节点
            if l2: l2 = l2.next  # 下一个节点
        return dummy.next  # 哨兵节点的下一个节点就是头节点
```

* [sol-Java]

```java
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(); // 哨兵节点
        ListNode cur = dummy;
        int carry = 0; // 进位
        while (l1 != null || l2 != null || carry != 0) { // 有一个不是空节点，或者还有进位，就继续迭代
            if (l1 != null) carry += l1.val; // 节点值和进位加在一起
            if (l2 != null) carry += l2.val; // 节点值和进位加在一起
            cur = cur.next = new ListNode(carry % 10); // 每个节点保存一个数位
            carry /= 10; // 新的进位
            if (l1 != null) l1 = l1.next; // 下一个节点
            if (l2 != null) l2 = l2.next; // 下一个节点
        }
        return dummy.next; // 哨兵节点的下一个节点就是头节点
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        auto dummy = new ListNode(); // 哨兵节点
        auto cur = dummy;
        int carry = 0; // 进位
        while (l1 || l2 || carry) { // 有一个不是空节点，或者还有进位，就继续迭代
            carry += (l1 ? l1->val : 0) + (l2 ? l2->val : 0); // 节点值和进位加在一起
            cur = cur->next = new ListNode(carry % 10); // 每个节点保存一个数位
            carry /= 10; // 新的进位
            if (l1) l1 = l1->next; // 下一个节点
            if (l2) l2 = l2->next; // 下一个节点
        }
        return dummy->next; // 哨兵节点的下一个节点就是头节点
    }
};
```

* [sol-Go]

```go
func addTwoNumbers(l1, l2 *ListNode) *ListNode {
    dummy := &ListNode{} // 哨兵节点
    cur := dummy
    carry := 0 // 进位
    for l1 != nil || l2 != nil || carry != 0 { // 有一个不是空节点，或者还有进位，就继续迭代
        if l1 != nil {
            carry += l1.Val // 节点值和进位加在一起
        }
        if l2 != nil {
            carry += l2.Val // 节点值和进位加在一起
        }
        cur.Next = &ListNode{Val: carry % 10} // 每个节点保存一个数位
        carry /= 10 // 新的进位
        cur = cur.Next // 下一个节点
        if l1 != nil {
            l1 = l1.Next // 下一个节点
        }
        if l2 != nil {
            l2 = l2.Next // 下一个节点
        }
    }
    return dummy.Next // 哨兵节点的下一个节点就是头节点
}
```

* [sol-JavaScript]

```js
var addTwoNumbers = function (l1, l2) {
    let dummy = new ListNode(); // 哨兵节点
    let cur = dummy;
    let carry = 0; // 进位
    while (l1 || l2 || carry) {
        if (l1) carry += l1.val; // 节点值和进位加在一起
        if (l2) carry += l2.val; // 节点值和进位加在一起
        cur = cur.next = new ListNode(carry % 10); // 每个节点保存一个数位
        carry = Math.floor(carry / 10); // 新的进位
        if (l1) l1 = l1.next; // 下一个节点
        if (l2) l2 = l2.next; // 下一个节点
    }
    return dummy.next; // 哨兵节点的下一个节点就是头节点
};
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $l_1$ 长度和 $l_2$ 长度的最大值。
- 空间复杂度：$\mathcal{O}(1)$。返回值不计入。

## 思考题

本题的链表是从数字的最低位开始的，如果改成从最高位开始，要怎么做呢？欢迎在评论区发表你的思路。

- [206. 反转链表](https://leetcode.cn/problems/reverse-linked-list/)
- [445. 两数相加 II](https://leetcode.cn/problems/add-two-numbers-ii/)

---

[往期每日一题题解（按 tag 分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

如果这篇题解对你有帮助，欢迎点赞👍！
